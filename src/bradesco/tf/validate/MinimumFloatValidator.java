//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.12.17 at 10:30:56 AM BRST 
//


package bradesco.tf.validate;

import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import com.javaf.Constants.INTEGER;
import com.javaf.model.ValuePlace;

/**
 * <p>Java class for MinimumFloatValidator complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MinimumFloatValidator">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.bradesco.com.br/firp}Validator">
 *       &lt;sequence>
 *         &lt;element name="minimum" type="{http://www.w3.org/2001/XMLSchema}float"/>
 *         &lt;element name="value-place" type="{http://www.bradesco.com.br/firp}ConfigurePlace"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MinimumFloatValidator", propOrder = {
    "minimum",
    "valuePlace"
})
public class MinimumFloatValidator
    extends Validator
{

    protected float minimum;
    @XmlElement(name = "value-place", required = true, type = ConfigurePlace.class)
    protected ValuePlace<Float> valuePlace;
    
    public MinimumFloatValidator(){
    	
    }
    
    public MinimumFloatValidator(final float minimum, final ValuePlace<Float> valuePlace){
    	setMinimum(minimum);
    	setValuePlace(valuePlace);
    }

    /**
     * Gets the value of the minimum property.
     * 
     */
    public float getMinimum() {
        return minimum;
    }

    /**
     * Sets the value of the minimum property.
     * 
     */
    public void setMinimum(float value) {
        this.minimum = value;
    }

    /**
     * Gets the value of the valuePlace property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurePlace }
     *     
     */
    public ValuePlace<Float> getValuePlace() {
        return valuePlace;
    }

    /**
     * Sets the value of the valuePlace property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurePlace }
     *     
     */
    public void setValuePlace(ValuePlace<Float> value) {
        this.valuePlace = value;
    }

    public boolean validate(List<String> messages){
    	
    	boolean _result = Boolean.TRUE;
    	final float _value = uformat.toFloat( valuePlace.getValue() );
    	
    	if(Float.compare(_value, minimum) <= INTEGER._0){
    		messages.add(helper.onInvalid(this, valuePlace.getLabel() + " deve possuir um valor maior que " + minimum));
    		
    		helper.onInvalid(this, valuePlace);
    		
			_result = Boolean.FALSE;
    	}
    	
    	return _result;
    }
}
