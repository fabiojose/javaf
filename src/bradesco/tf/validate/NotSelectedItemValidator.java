//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.08.15 at 09:18:59 AM BRT 
//


package bradesco.tf.validate;

import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import com.javaf.Constants.I18N;
import com.javaf.model.ValuePlace;

/**
 * <p>Java class for NotSelectedItemValidator complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NotSelectedItemValidator">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.bradesco.com.br/firp}Validator">
 *       &lt;sequence>
 *         &lt;element name="value-place" type="{http://www.bradesco.com.br/firp}ConfigurePlace"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NotSelectedItemValidator", propOrder = {
    "valuePlace"
})
public class NotSelectedItemValidator
    extends Validator implements IValidator
{

	@XmlElement(name = "value-place", required = true, type = ConfigurePlace.class)
    protected ValuePlace<Object> valuePlace;

    /**
     * Gets the value of the valuePlace property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurePlace }
     *     
     */
    public ValuePlace<Object> getValuePlace() {
        return valuePlace;
    }

    /**
     * Sets the value of the valuePlace property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurePlace }
     *     
     */
    public void setValuePlace(ValuePlace<Object> value) {
        this.valuePlace = value;
    }

	public boolean validate(final List<String> messages) {
		
		boolean _result = Boolean.FALSE;
		final Object _item = getValuePlace().getValue();
		if(null!= _item){
			_result = !uformat.isDefault(_item);
		}
		
		if(!_result){
			messages.add(helper.onInvalid(this, localization.localize(I18N.SELECIONE_UMA_OPCAO_EM ,getValuePlace().getLabel()) ));
			
			helper.onInvalid(this, getValuePlace());
		}
		
		return _result;
	}

}
