//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.08.15 at 09:18:59 AM BRT 
//


package bradesco.tf.validate;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import com.javaf.Constants.I18N;
import com.javaf.Constants.STRING;
import com.javaf.javase.text.ParsingException;
import com.javaf.model.ValuePlace;

/**
 * <p>Java class for DateNotLessThanAnotherValidator complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DateNotLessThanAnotherValidator">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.bradesco.com.br/firp}Validator">
 *       &lt;sequence>
 *         &lt;element name="date" type="{http://www.bradesco.com.br/firp}ConfigurePlace"/>
 *         &lt;element name="another" type="{http://www.bradesco.com.br/firp}ConfigurePlace"/>
 *         &lt;element name="format" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DateNotLessThanAnotherValidator", propOrder = {
    "date",
    "another",
    "format"
})
@XmlSeeAlso({
    TimePeriodValidator.class
})
public class DateNotLessThanAnotherValidator
    extends Validator implements IValidator
{

	@XmlElement(required = true, type = ConfigurePlace.class)
    protected ValuePlace<String> date;
    @XmlElement(required = true, type = ConfigurePlace.class)
    protected ValuePlace<String> another;
    @XmlElement(required = true)
    protected String format;
    
    private transient NotFilledValidator notFilled;
    private transient DateFormat formatter;
    
    public DateNotLessThanAnotherValidator(){
    	notFilled = new NotFilledValidator();
    }
    
    @SuppressWarnings("unchecked")
	public DateNotLessThanAnotherValidator(final ValuePlace<String> date, final ValuePlace<String> another, final String format){
    	setDate(date);
    	setAnother(another);
    	setFormat(format);
    	
    	notFilled = new NotFilledValidator(date, another);
    }

    @SuppressWarnings("unchecked")
	public DateNotLessThanAnotherValidator(final ValuePlace<String> date, final ValuePlace<String> another, final DateFormat formatter){
    	setDate(date);
    	setAnother(another);
    	this.formatter = formatter;
    	
    	notFilled = new NotFilledValidator(date, another);
    }
    
    /**
     * Gets the value of the date property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurePlace }
     *     
     */
    public ValuePlace<String> getDate() {
        return date;
    }

    /**
     * Sets the value of the date property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurePlace }
     *     
     */
    public void setDate(ValuePlace<String> value) {
        this.date = value;
    }

    /**
     * Gets the value of the another property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurePlace }
     *     
     */
    public ValuePlace<String> getAnother() {
        return another;
    }

    /**
     * Sets the value of the another property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurePlace }
     *     
     */
    public void setAnother(ValuePlace<String> value) {
        this.another = value;
    }

    /**
     * Gets the value of the format property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFormat() {
        return format;
    }

    /**
     * Sets the value of the format property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFormat(String value) {
        this.format = value;
    }
    
    private DateFormat getFormatter(){
    	if(null== formatter){
    		formatter = new SimpleDateFormat(format);
    	}
    	
    	return formatter;
    }
    
    public void setFirst(final String first){
    	super.setFirst(first);
    	notFilled.setFirst(first);
    }

	public boolean validate(List<String> messages) {
		boolean _result = Boolean.TRUE;
		
		//validar preenchimento
		if(notFilled.getValuePlace().isEmpty()){
			notFilled.getValuePlace().add(date);
			notFilled.getValuePlace().add(another);
		}
		notFilled.setMessage(getMessage());
		_result = notFilled.validate(messages);
		
		if(_result){//preenchido
			try{
				final DateFormat _formatter = getFormatter();
				
				final Date _date    = uformat.parseDate(date.getValue(), _formatter);
				final Date _another = uformat.parseDate(another.getValue(), _formatter);
				
				final boolean _isAfter = _date.after(_another); 
				if(_isAfter){
					messages.add(helper.onInvalid(this, STRING.HIFEM + STRING.SPACE1 + date.getLabel() + I18N.DEVE_SER_INFERIOR_OU_IGUAL + another.getLabel() + STRING.NEW_LINE));
					
					helper.onInvalid(this, date);
				}
				
				_result = !_isAfter;
			}catch(ParsingException _e){
				logging.warn(_e.getMessage(), _e);
			}
		} else {
			setFirst(notFilled.getFirst());
		}
		
		return _result; 
	}

}
